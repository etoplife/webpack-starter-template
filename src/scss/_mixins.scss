@import 'vars';

/**
 * Helper mixins
*/

$breakpoints: (
  xs: 320px,
  md: 767px,
  xl: 1199px,
);

@mixin clearfix {
  &::after {
    clear: both;
    content: '';
    display: table;
  }
}

@function getPreviousSize($currentSize) {
  $keys: map-keys($breakpoints);
  $index: index($keys, $currentSize) - 1;
  $value: map-values($breakpoints);

  @return nth($value, $index);
}

@mixin media($minmax, $media) {
  @each $size, $resolution in $breakpoints {
    @if $media == $size {
      @if ($minmax != "within") {
        @media only screen and (#{$minmax}-width: $resolution) {
          @content;
        }
      } @else {
        @if (index(map-keys($breakpoints), $media) > 1) {
          @media only screen and (min-width: getPreviousSize($media) + 1) and (max-width: $resolution) {
            @content;
          }
        } @else {
          @media only screen and (max-width: $resolution) {
            @content;
          }
        }
      }
    }
  }
}

@mixin desktop() {
  @include media ('min', 'xl') {
    @content;
  }
}

@mixin adaptive() {
  @include media ('max', 'xl') {
    @content;
  }
}

@mixin tablet() {
  @include media ('within', 'xl') {
    @content;
  }
}

@mixin mobile() {
  @include media ('max', 'md') {
    @content;
  }
}

@mixin card-title() {
  font-size: 16px;
  font-weight: 500;
  color: $color-dark;
  margin: 0 0 4px;
  text-transform: uppercase;
}

@mixin card-text() {
  font-size: 14px;
  font-weight: 300;
}

@function pixel-to-vw($pixelSize, $screenWidth: 1903) {
  $vw: $pixelSize / $screenWidth * 100;
  @return #{$vw}vw;
}

@function pixel-to-vh($pixelSize, $screenWidth: 980) {
  $vh: $pixelSize / $screenWidth * 100;
  @return #{$vh}vh;
}
