@import 'vars';

/**
 * Helper mixins
*/

$breakpoints: (
  xs: 320px,
  md: 767px,
  xl: 1199px,
);

@mixin clearfix {
  &::after {
    clear: both;
    content: '';
    display: table;
  }
}

@function getPreviousSize($currentSize) {
  $keys: map-keys($breakpoints);
  $index: index($keys, $currentSize) - 1;
  $value: map-values($breakpoints);

  @return nth($value, $index);
}

@mixin media($minmax, $media) {
  @each $size, $resolution in $breakpoints {
    @if $media == $size {
      @if ($minmax != "within") {
        @if ($minmax == 'min') {
          $resolution: $resolution + 1px;
        }

        @media only screen and (#{$minmax}-width: $resolution) {
          @content;
        }
      } @else {
        @if (index(map-keys($breakpoints), $media) > 1) {
          @media only screen and (min-width: getPreviousSize($media) + 1) and (max-width: $resolution) {
            @content;
          }
        } @else {
          @media only screen and (max-width: $resolution) {
            @content;
          }
        }
      }
    }
  }
}

@mixin desktop() {
  @include media ('min', 'xl') {
    @content;
  }
}

@mixin adaptive() {
  @include media ('max', 'xl') {
    @content;
  }
}

@mixin adaptiveMin() {
  @include media ('min', 'xl') {
    @content;
  }
}

@mixin tablet() {
  @include media ('within', 'xl') {
    @content;
  }
}

@mixin mobile() {
  @include media ('max', 'md') {
    @content;
  }
}

@mixin mobileMin() {
  @include media ('min', 'md') {
    @content;
  }
}

@mixin card-title() {
  font-size: 16px;
  font-weight: 500;
  color: $color-dark;
  margin: 0 0 4px;
  text-transform: uppercase;
}

@mixin card-text() {
  font-size: 14px;
  font-weight: 300;
}

@mixin containerPaddings() {
  padding-right: $containerXlPadding;
  padding-left: $containerXlPadding;

  @include mobile {
    padding-right: $containerSmPadding;
    padding-left: $containerSmPadding;
  }
}

@mixin customScroll() {
  &::-webkit-scrollbar {
    width: 4px;
    background: #CDD1DF;
  }

  &::-webkit-scrollbar-thumb {
    background: $color-lightgray;
  }
}

@function pixel-to-vw($pixelSize, $screenWidth: 1903) {
  $vw: $pixelSize / $screenWidth * 100;
  @return #{$vw}vw;
}

@function pixel-to-vh($pixelSize, $screenWidth: 980) {
  $vh: $pixelSize / $screenWidth * 100;
  @return #{$vh}vh;
}

@function base64($code) {
  @return url("data:image/svg+xml;base64,#{$code}");
}

@mixin centered($axis: 'both') {
  position: absolute;

  @if ($axis == 'both') {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  @if $axis == 'x' {
    left: 50%;
    transform: translateX(-50%);
  }

  @if $axis == 'y' {
    top: 50%;
    transform: translateY(-50%);
  }
}

@mixin relativeHeight($percent) {
  &::before {
    content: "";
    display: block;
    padding: #{$percent} + "%" 0 0;
  }
}

@mixin fullAbsolute() {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}
